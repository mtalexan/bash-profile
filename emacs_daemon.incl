# Aliases and settings for a randomly named emacs server daemon, starting up
# if none exists, and all future calls connecting to that daemon.
#
# Requires no arguments.

##############################################################################
# User defined "alias" commands for emacs server auto-startup
#

alias exitc="exit_cleanup "
alias emacsskill='emacss_kill '


#define a random name so it's unique in each terminal, but remembered for the life of the terminal
#If emacss_startup_singleton is called, it will overwrite this if it finds an existing running
#emacs daemon.
export EMACS_DAEMON_NAME="server$RANDOM"

# Usernames of 8 characters or less usally use the username as part of the socket path
# Linux doesn't like longer usernames though, so it will use the UID instead of the
# username for some things longer than 8 characters.  We have to check to see which of
# these it picked after we start the daemon.  These names are automatically created/used
# by emacs itself
EMACS_DAEMON_SOCKET_PATH_USER="/tmp/emacs${USER}"
EMACS_DAEMON_SOCKET_PATH_UID="/tmp/emacs$(id -u)"    

#default
export EMACS_DAEMON_SOCKET_PATH=$EMACS_DAEMON_SOCKET_PATH_USER

## Either attaches to an existing daemon, or starts a fresh daemon.  Depending on which of the
## two sub-functions are called, it can either guarantee a singleton per server, or it can have
## a unique daemon persession.  If the per_session is used with screen, it will end up with a
## single daemon per screen session
emacss_startup()
{
    emacss_startup_singleton $@
}

## Determines whether the emacs server is running, and starts it silently if it isn't.
## Looks for the specific server named based on the EMACS_DAEMON_NAME for the server
emacss_check_start_daemon()
{
    TMP=$(ps alx | grep $(id -u) | grep -E "emacs[ ]+--daemon=" | grep -v "grep" | awk '{print $13}')

    if [ "$TMP" == "" ] ; then
        echo >&2 "No daemon found, starting one $EMACS_DAEMON_NAME"

        screen -S "emacsScreen" -d -m emacs --daemon=$EMACS_DAEMON_NAME

        # Since we started it in screen, we aren't dependent on the daemon actually getting started before we move on.
        # Add a loop with a sleep until the daemon is actually started
        TMP=$(ps ax | grep "daemon=$EMACS_DAEMON_NAME" | grep -v "grep" | awk '{print $1}')
        while [ "$TMP" == "" ] ; do
            sleep 1
            TMP=$(ps ax | grep "daemon=$EMACS_DAEMON_NAME" | grep -v "grep" | awk '{print $1}')
        done
        #add a final sleep for the daemon to actually get prepped once it's running
        sleep 3

        found=
        while [ "$found" == "" ] ; do
            #Determine which of the two possible locations the socket was created in
            if [ -S "$EMACS_DAEMON_SOCKET_PATH_USER/$EMACS_DAEMON_NAME" ] ; then
                export EMACS_DAEMON_SOCKET_PATH=$EMACS_DAEMON_SOCKET_PATH_USER
                found=yes
            elif [ -S "$EMACS_DAEMON_SOCKET_PATH_UID/$EMACS_DAEMON_NAME" ] ; then
                export EMACS_DAEMON_SOCKET_PATH=$EMACS_DAEMON_SOCKET_PATH_UID
                found=yes
            else
                echo "No opened socket found yet"
                sleep 1
                found=
            fi
        done
    fi
}

## Causes an emacs server to be started in daemon mode that's associated with
## the terminal if it's not already running.  All emacs calls are then handled
## as calls to emacsclient that's connecting to that emacs server.  Any arguments
## are passed directly to the emacsclient call.  Uses EMACS_DAEMON_NAME as the name
## of the server to check if it's already running
emacss_startup_per_session()
{
    emacss_check_start_daemon

    # can't include -n because then it doesn't work with -nw
    emacsclient -q -s ${EMACS_DAEMON_SOCKET_PATH}/${EMACS_DAEMON_NAME} $@
}

## Looks for a currently running emacs server and parses out the name of the first one found,
## setting the EMACS_DAEMON_NAME accordingly.  Does nothing if one isn't running
emacss_get_current_daemon_name()
{
    # get the username's number
    USERID=$(id -u $USER)
    # get all processes for our username or user id that contain "--daemon=" in it, then keep only the
    # first one
    PROCS=$(ps alx | grep -e "$USERID" | grep -v "grep" | grep -e '--daemon=' | head -n 1)
    EXISTINGNAME=

    # If we found any matching processes, set the existing name to the daemon name from the process
    if [ -n "$PROCS" ] ; then
        EXISTINGNAME=$(echo $PROCS | grep -E -o -e 'daemon=[^ ]+' | grep -E -o -e "=.*$" | grep -E -o -e "[^=]*")
    fi

    # If we actually have a valid existing server name, set our EMACS_DAEMON_NAME to it
    if [ -n "$EXISTINGNAME" ] ; then
        export EMACS_DAEMON_NAME=$EXISTINGNAME        
        
        #also set our daemon socket path if we have one (we have to determine whether it used the UID or username)
        if [ -S "$EMACS_DAEMON_SOCKET_PATH_USER/$EMACS_DAEMON_NAME" ] ; then
            echo "found $EMACS_DAEMON_SOCKET_PATH_USER/$EMACS_DAEMON_NAME"
            export EMACS_DAEMON_SOCKET_PATH=$EMACS_DAEMON_SOCKET_PATH_USER
        elif [ -S "$EMACS_DAEMON_SOCKET_PATH_UID/$EMACS_DAEMON_NAME" ] ; then
            echo "found $EMACS_DAEMON_SOCKET_PATH_UID/$EMACS_DAEMON_NAME"
            export EMACS_DAEMON_SOCKET_PATH=$EMACS_DAEMON_SOCKET_PATH_UID
        fi
    fi   
}

## Gets and sets the EMACS_DAEMON_NAME from the first currently running emacs server found (if any) and then
## calls emacss_startup_per_session
emacss_startup_singleton()
{
    emacss_get_current_daemon_name
    
    # Use the per-session startup now that we've set the daemon name environment variable to match
    emacss_startup_per_session $@
}

## Finds the PID of the emacs server daemon process and kills it
emacss_kill()
{
    TMP=$(ps ax | grep "daemon=$EMACS_DAEMON_NAME" | grep -v "grep" | awk '{print $1}')
    if [ -n "$TMP" ] ; then
        kill -9 $TMP 2> /dev/null
        #clean up any dead screen sessions now as well
        screen -wipe
    fi
}

## Macro to alias the "exit" command to so we'll automatically kill the 
## emacs server for the terminal. Do any filtering on sub-terminals here
## so the emacs server can be killed first if necessary
exit_cleanup()
{
    TMP=$(ps ax | grep "daemon=$EMACS_DAEMON_NAME" | grep -v "grep" | awk '{print $1}')
    if [ -n "$TMP" ] ; then
        echo >&2 "Cleaning up emacs server"
        emacss_kill
    fi
}

# Always run this to set the environment daemon name to match any running daemon if we have one
emacss_get_current_daemon_name
