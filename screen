# Functions, aliases, and settings to provide screen commands and X11 forwarding
# within screen commands based on local or remote connections.
#
# Depends on emacs_window
# Arguments:
# NO_REMOTE_WINDOW : Set non-empty indicates any remote connections should
#                    cause non-windowed mode to be used for tools when the user
#                    is detected to be logging in remotely.  Unset or left empty,
#                    whether the user is remote or local is ignored.
# NO_WINDOW : Forces non-window mode regardless of whether the user is local or
#             remote.
# SAVE_SCREEN_AUTH : If set non-empty, the XAuth settings are saved as well to
#                    allow authenticated X11 forwarding.
# WIPE_SCREENS_ON_START : If set non-empty, wipe all detached screen sessions on
#                         every login.  Useful when screen is the shell used by
#                         a terminal but we aren't intending to keep things
#                         around permanently.
##############################################################################
# User defined "alias" commands for screen commands
#

# Get this once so we have a random number to associate with each login.
# Then if we have multiple separate logins trying to do different x11 forwarding
# we can differentiate on a per-session basis
SCREEN_SESSION_ID=${RANDOM}

# Function that checks if our display is being forwarded and sets the VISUAL variable
# to a non-windowed version if it is, or a windowed version if it isn't
# Not used, everything is forwarded (don't do this right now since it's being used
# when ssh-ing on-site)
function reset_visual_editor()
{
    if [ -n "$NO_WINDOW" ] ; then
        nowindow_mode
    elif [ -z "$NO_REMOTE_WINDOW" ] ; then
        window_mode
    else #NO_REMOTE_WINDOW is set
        #check if we're a remote X11 forwarding session or not
        LOCAL_DISP=`echo "$DISPLAY" | grep "localhost"` 
        if [ -z "$LOCAL_DISP" ] ; then
            #Do everything with windows normally
            window_mode
        else
            #do everything in no window mode by default
            nowindow_mode
        fi
     fi
}

# Saves the DISPLAY and x11 authorizations to files so they can be retrieved after
# entering a screen session.
function x11save()
{
    id="User1"
    if [ ! -u $1 ] ; then
        id="$1"
    fi

    dispFile="/home/$USER/.echo.$USER.$id.$SCREEN_SESSION_ID."
    dispFile+="DISPLAY.txt"
    
    authFile="/home/$USER/.parse.$USER.$id.$SCREEN_SESSION_ID."
    authFile+="Xauth.txt"

    # Remember the DISPLAY variable
    echo "$DISPLAY" >&2
    echo "$DISPLAY" > $dispFile
    chmod a+r $dispFile

    # Remember our xauth cookie

    #DISPLAY format is "sometext:##.##" where "sometext" is optional and ##'s are any 1 or multi digit numbers
    #Get the ## from the DISPLAY immediately after the ':' but before the '.'
    DISP_NUM=`echo "$DISPLAY" | awk 'BEGIN {FS=":"}; {print $2}' | awk 'BEGIN {FS="."}; {print $1}'`
    if [ -n "$DISP_NUM" ] && [ $DISP_NUM != "0" ] ; then
        xauth list | grep `echo :$DISP_NUM` >&2
        xauth list | grep `echo :$DISP_NUM` > $authFile
        chmod a+r $authFile
    else
        #clear the authFile if we're on local display
        echo "" > $authFile
    fi

}

## Loads the saved DISPLAY and x11 authorizations from x11save() so it can be set
## to forward graphics when connecting remotely, or to not forward graphics if not
## connecting remotely.  Also has the side effect of updating the VISUAL variable
## so the default is either windowed or non-windowed depending on the remote connection.
function x11load()
{
    id="User1"
    if [ ! -u $1 ] ; then
        id="$1"
    fi

    dispFile="/home/$USER/.echo.$USER.$id.$SCREEN_SESSION_ID."
    dispFile+="DISPLAY.txt"

    authFile="/home/$USER/.parse.$USER.$id.$SCREEN_SESSION_ID."
    authFile+="Xauth.txt"

    if [ -n "$SAVE_SCREEN_AUTH" ] ; then
        if [ -f $authFile ] ; then
            ADD=`cat $authFile`
            if [ ! -z "$ADD" ] ; then
                echo `cat $authFile`
                xauth add `cat $authFile`
            else
                echo "No saved xauth"
            fi
        else
            echo "No saved xauth"
        fi
    fi

    if [ -f $dispFile ] ; then
        ADD=`cat $dispFile`
        if [ ! -z "$ADD" ] ; then
            echo `cat $dispFile`
            export DISPLAY=`cat $dispFile`
        else
            echo "No saved DISPLAY"
        fi
    else
        echo "No saved DISPLAY"
    fi

    reset_visual_editor
}

# When a single screen session is shared between two locations,
# the display to use gets fought over.  x11load sets it to the
# remote display if it's an SSH session with X forwarding, but
# the local needs a way to steal it back.
function x11local()
{
    export DISPLAY=":0.0"

    reset_visual_editor
}

## Function to handle automatically saving the x11 setup when a calling screen
function screen_remote()
{
    # Hide the output from saving the screen setup
    x11save 1>&2
    screen $@
}

#alias screen="screen_remote"
alias sls="screen -ls "

#Always run x11save on login so the details are updated for screen sessions to use
x11save

## Funtion allowing a new screen to be created with a name that's 
## used both in the screen's title and as the "socket" name (the name
## people see when they do screen -ls)
function screen_new()
{
    NAME=

    #goto the location we want to store the screen logs
    cd ~/screen_logs

    if [ ! -u $1 ]; then
        #pull the name off the arg list, but keep the rest of the args
        NAME=$1
        shift
        screen -A -a -t $NAME -S $NAME $@   
    else
        screen $@
    fi
}

# Force quites a named screen session
function screenkill()
{
    screen -X -S $1 quit
}

# With our terminal programs opening screen sessions,
# we quickly build up a bunch of detached screens.  Give
# a quick way to wipe them all.
function screenwipe()
{
    local DEAD_SESSIONS=`screen -ls | grep "Detached" | awk '{print $1}'`
    for S in $DEAD_SESSIONS ; do
        screenkill $S
    done
}

# This function parses the name of an attached or detached screen
# passed to it, determines the timestamp, and gets the name of the
# log file from it.
# NOTE: This MUST match with the screenrc setting for the log file name
function screentail()
{
    local NAME=$1
    shift

    # If we gave part of an automatically assigned name, this will work,
    # otherwise we either don't get a second line or get only spaces that
    # tr removes.
    # This doesn't work if the screen has a custom name though.
    SESSION_NAME=`screen -ls ${NAME} | awk 'NR==2 {print $1}' | tr -d ' '`
    if [ -z "${SESSION_NAME}" ] ; then
        # If we didn't get a match, just use the provided name and assume
        # it was a custom name
        SESSION_NAME=$NAME
    fi

    # This is highly dependent on the name given to the screen logs in
    # the screenrc.  We assume the name log file is named "/tmp/screenlog.*"
    # and that it ends with ".$SESSION_NAME".

    # the log file is /tmp/screenlog.*.$SESSION_NAME so find it
    local SCREEN_LOG_FILE=`find /tmp -name "screenlog.*.${SESSION_NAME}" 2>/dev/null`
    if [ -z "$SCREEN_LOG_FILE" ] ; then
        echo "No matching log file found for name: $SESSION_NAME"
        return 1
    else
        echo >&2 "---------------------"
        tail $@ $SCREEN_LOG_FILE
        echo >&2 "---------------------"
    fi
}

alias screenls='screen -ls '

# If WIPE_SCREENS_ON_START is set
if [ -n "${WIPE_SCREENS_ON_START}" ] ; then
    # clear all detached screen sessions, hiding the output when we do
    screen_wipe &>/dev/null
fi

#check if we're a remote X11 forwarding session or not
if echo "$DISPLAY" | grep -q "localhost" ; then
    # automatically print the open screen sessions if we logged
    # in with X11 forwarding
    screen -ls
fi


# Set some shortcut aliases
alias s-ls="screenls "
alias s-wipe="screenwipe "
alias s-tail="screentail "
alias s-kill="screenkill "
alias s-x="screen -x -S " #quick attach to running session with multi-view
