# Normally the Ctrl+s is for forward search through history (opposite of Ctrl+r),
# but Ctrl+s is default bound by most terminals to flow control XON/XOFF.  If we
# explicitly set it to XON or XOFF though, the Ctrl+s binding gets freed up.
#stty -ixon

# Set the cursor type
# TODO: add this to PS1
case "${CURSOR_TYPE}" in
    block_blink )
        echo -e -n "\x1b[\x30 q" # changes to blinking block
        #echo -e -n "\x1b[\x31 q" # changes to blinking block also
        ;;
    block )
        echo -e -n "\x1b[\x32 q" # changes to steady block
        ;;
    underline_blink )
        echo -e -n "\x1b[\x33 q" # changes to blinking underline
        ;;
    underline )
        echo -e -n "\x1b[\x34 q" # changes to steady underline
        ;;
    bar_blink )
        echo -e -n "\x1b[\x35 q" # changes to blinking bar
        ;;
    bar )
        echo -e -n "\x1b[\x36 q" # changes to steady bar
        ;;
    * )
        # do nothing
        ;;
esac

# colored GCC warnings and errors
export GCC_COLORS='error=01;31;warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

alias psme='ps alx | grep `id -u` '

# set the pager, have it passthru ASCII color codes
export PAGER="less -R"

# enable color support of ls and also add handy aliases.  Also allow overriding default colors by
# adding ~/.dircolors
if command -v dircolors &>/dev/null; then
    if [ -r ~/.dircolors ]; then
        # run the dircolors command on the file, which results in a bunch of commands we need to run
        # as part of shell loading.
        # If running it on our ~/.dircolors doesn't work, use the default
        eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    fi

    # use colors for everything if we have color support

    alias ls='ls --color=auto '
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto '
    alias fgrep='fgrep --color=auto '
    alias egrep='egrep --color=auto '
fi

# Support fasd if it's installed
if command -v fasd &>/dev/null ; then
    fasd_command="$(command -v fasd)"
    if [ -n "${BASH}" ] ; then
        fasd_cache="${HOME}/.fasd-init-bash"
        if [ "${fasd_command}" -nt "${fasd_cache}" -o ! -s "${fasd_cache}" ]; then
            "${fasd_command}" --init posix-alias bash-hook bash-ccomp bash-ccomp-install >| "$fasd_cache"
        fi
    else
        fasd_cache="${HOME}/.fasd-init-zsh"
        if [ "${fasd_command}" -nt "${fasd_cache}" -o ! -s "${fasd_cache}" ]; then
            "${fasd_command}" --init posix-alias zsh-hook zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install >| "${fasd_cache}"
        fi
    fi
    source "$fasd_cache"
    # don't leave these set in our global shell environment
    unset fasd_cache
    unset fasd_command
fi

# VTE backend, which is used by gnome-shell and tilix, needs /etc/profile.d/vte.sh sourced
# to allow PROMPT_COMMAND to be passed, which is used for passing information when opening
# new terminals.  Ubuntu and Arch linux screwed up sourcing of scripts in /etc/profile.d/
# for this, so we have to to it manually. Some systems (Fedora) did it properly though so
# check to see if the script was already sourced by looking for the primary function it defines.
if ! type __vte_prompt_command &> /dev/null ; then
    # prefer properly named script without the version number in it, but fall back since Ubuntu
    # screwed the naming up by adding a version number to it.
    if [ -e "/etc/profile.d/vte.sh" ] ; then
        source "/etc/profile.d/vte.sh"
    elif [ -e "/etc/profile.d/vte-2.91.sh" ] ; then
        source "/etc/profile.d/vte-2.91.sh"
    fi
fi
